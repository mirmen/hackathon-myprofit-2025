import 'package:flutter/foundation.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import '../models/product.dart';

class ProductProvider extends ChangeNotifier {
  final SupabaseClient _client = Supabase.instance.client;

  List<Product> _products = [];
  List<Product> _filteredProducts = [];
  String _selectedCategory = '–í—Å–µ';
  String _searchQuery = '';

  List<Product> get products => List.unmodifiable(_filteredProducts);
  List<Product> get allProducts => List.unmodifiable(_products);
  String get selectedCategory => _selectedCategory;
  String get searchQuery => _searchQuery;
  List<String> get categories => [
    '–í—Å–µ',
    ..._products.map((p) => p.type).toSet(),
  ];

  bool _isLoading = false;
  bool get isLoading => _isLoading;

  Future<void> loadProducts() async {
    print('üîÑ –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤...');
    _isLoading = true;
    notifyListeners();

    try {
      print('üì° –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Ç–∞–±–ª–∏—Ü–µ products...');

      List<dynamic> response = [];

      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –±–µ–∑ —è–≤–Ω–æ–≥–æ —É–∫–∞–∑–∞–Ω–∏—è —Å—Ö–µ–º—ã
      try {
        print('üöÄ –ü—Ä–æ–±—É–µ–º –∑–∞–ø—Ä–æ—Å –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è —Å—Ö–µ–º—ã...');
        response = await _client.from('products').select();
        print('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: ${response.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤');
      } catch (e) {
        print('‚ùå –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è: $e');
      }

      // –ï—Å–ª–∏ –ø—É—Å—Ç–æ, –ø—Ä–æ–±—É–µ–º —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º —Å—Ö–µ–º—ã public
      if (response.isEmpty) {
        try {
          print(
            '‚ö†Ô∏è –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ, –ø—Ä–æ–±—É–µ–º —Å —è–≤–Ω–æ–π —Å—Ö–µ–º–æ–π public...',
          );
          response = await _client.schema('public').from('products').select();
          print('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—Ç–æ—Ä–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: ${response.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤');
        } catch (e) {
          print('‚ùå –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å —Ç–æ–∂–µ –Ω–µ —É–¥–∞–ª—Å—è: $e');
        }
      }

      print('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç Supabase –ø–æ–ª—É—á–µ–Ω');
      print('üìä –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ: $response');
      print('üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${response.length}');

      if (response.isEmpty) {
        print('‚ö†Ô∏è –í –±–∞–∑–µ –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤!');
        _products = [];
        _filteredProducts = [];
      } else {
        print('üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –æ–±—ä–µ–∫—Ç—ã Product...');
        _products = response
            .map<Product>(
              (json) => Product.fromJson(json as Map<String, dynamic>),
            )
            .toList();
        print('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${_products.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤');

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–∏—Å–∫)
        _applyFilters();
        print(
          '‚úÖ –§–∏–ª—å—Ç—Ä—ã –ø—Ä–∏–º–µ–Ω–µ–Ω—ã, ${_filteredProducts.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏',
        );
      }
    } catch (e, stackTrace) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: $e');
      print('üìç Stack trace: $stackTrace');
      _products = [];
      _filteredProducts = [];
    } finally {
      _isLoading = false;
      print('üèÅ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      notifyListeners();
    }
  }

  void setCategory(String category) {
    if (_selectedCategory != category) {
      _selectedCategory = category;
      _applyFilters();
      notifyListeners();
    }
  }

  void setSearchQuery(String query) {
    if (_searchQuery != query) {
      _searchQuery = query;
      _applyFilters();
      notifyListeners();
    }
  }

  void _applyFilters() {
    List<Product> filtered = _products;

    if (_selectedCategory != '–í—Å–µ') {
      filtered = filtered
          .where((product) => product.type == _selectedCategory)
          .toList();
    }

    if (_searchQuery.isNotEmpty) {
      final lowercaseQuery = _searchQuery.toLowerCase();
      filtered = filtered.where((product) {
        return product.title.toLowerCase().contains(lowercaseQuery) ||
            product.author.toLowerCase().contains(lowercaseQuery) ||
            product.type.toLowerCase().contains(lowercaseQuery);
      }).toList();
    }

    _filteredProducts = filtered;
  }

  Future<Product?> getProductById(String id) async {
    try {
      final response = await _client
          .schema('public')
          .from('products')
          .select()
          .eq('id', id)
          .single();
      return Product.fromJson(response);
    } catch (e) {
      print('Error getting product by id: $e');
      return null;
    }
  }

  List<Product> getFeaturedProducts() {
    return _products.where((product) => product.rating >= 4.7).toList();
  }

  List<Product> getNewProducts() {
    // Sort by created_at desc, take 3
    final sorted = List<Product>.from(_products)
      ..sort((a, b) => b.createdAt.compareTo(a.createdAt));
    return sorted.take(3).toList();
  }

  void clearFilters() {
    _selectedCategory = '–í—Å–µ';
    _searchQuery = '';
    _applyFilters();
    notifyListeners();
  }
}

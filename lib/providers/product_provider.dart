import 'package:flutter/foundation.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import '../models/product.dart';

/// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
/// –ó–∞–≥—Ä—É–∂–∞–µ—Ç, —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∫–∞—Ç–∞–ª–æ–≥—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤
class ProductProvider extends ChangeNotifier {
  /// –ö–ª–∏–µ–Ω—Ç Supabase –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
  final SupabaseClient _client = Supabase.instance.client;

  /// –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  List<Product> _products = [];

  /// –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã (–ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–∏—Å–∫—É)
  List<Product> _filteredProducts = [];

  /// –í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
  String _selectedCategory = '–í—Å–µ';

  /// –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
  String _searchQuery = '';

  /// –ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º
  List<Product> get products => List.unmodifiable(_filteredProducts);
  List<Product> get allProducts => List.unmodifiable(_products);
  String get selectedCategory => _selectedCategory;
  String get searchQuery => _searchQuery;

  /// –°–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–æ–¥—É–∫—Ç–æ–≤
  List<String> get categories => [
    '–í—Å–µ',
    ..._products.map((p) => p.type).toSet(),
  ];

  /// –§–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
  bool _isLoading = false;
  bool get isLoading => _isLoading;

  /// –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  /// –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ —Ç–∞–±–ª–∏—Ü–µ products –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã
  Future<void> loadProducts() async {
    print('üîÑ –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤...');
    _isLoading = true;
    notifyListeners();

    try {
      print('üì° –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Ç–∞–±–ª–∏—Ü–µ products...');

      List<dynamic> response = [];

      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –±–µ–∑ —è–≤–Ω–æ–≥–æ —É–∫–∞–∑–∞–Ω–∏—è —Å—Ö–µ–º—ã
      try {
        print('üöÄ –ü—Ä–æ–±—É–µ–º –∑–∞–ø—Ä–æ—Å –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è —Å—Ö–µ–º—ã...');
        response = await _client.from('products').select();
        print('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: ${response.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤');
      } catch (e) {
        print('‚ùå –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è: $e');
      }

      // –ï—Å–ª–∏ –ø—É—Å—Ç–æ, –ø—Ä–æ–±—É–µ–º —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º —Å—Ö–µ–º—ã public
      if (response.isEmpty) {
        try {
          print(
            '‚ö†Ô∏è –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ, –ø—Ä–æ–±—É–µ–º —Å —è–≤–Ω–æ–π —Å—Ö–µ–º–æ–π public...',
          );
          response = await _client.schema('public').from('products').select();
          print('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—Ç–æ—Ä–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: ${response.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤');
        } catch (e) {
          print('‚ùå –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å —Ç–æ–∂–µ –Ω–µ —É–¥–∞–ª—Å—è: $e');
        }
      }

      print('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç Supabase –ø–æ–ª—É—á–µ–Ω');
      print('üìä –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ: $response');
      print('üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${response.length}');

      if (response.isEmpty) {
        print('‚ö†Ô∏è –í –±–∞–∑–µ –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤!');
        _products = [];
        _filteredProducts = [];
      } else {
        print('üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –æ–±—ä–µ–∫—Ç—ã Product...');
        _products = response
            .map<Product>(
              (json) => Product.fromJson(json as Map<String, dynamic>),
            )
            .toList();
        print('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${_products.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤');

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–∏—Å–∫)
        _applyFilters();
        print(
          '‚úÖ –§–∏–ª—å—Ç—Ä—ã –ø—Ä–∏–º–µ–Ω–µ–Ω—ã, ${_filteredProducts.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏',
        );
      }
    } catch (e, stackTrace) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: $e');
      print('üìç Stack trace: $stackTrace');
      _products = [];
      _filteredProducts = [];
    } finally {
      _isLoading = false;
      print('üèÅ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      notifyListeners();
    }
  }

  /// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  /// @param category - –Ω–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
  void setCategory(String category) {
    if (_selectedCategory != category) {
      _selectedCategory = category;
      _applyFilters();
      notifyListeners();
    }
  }

  /// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
  /// @param query - –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
  void setSearchQuery(String query) {
    if (_searchQuery != query) {
      _searchQuery = query;
      _applyFilters();
      notifyListeners();
    }
  }

  /// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫ —Å–ø–∏—Å–∫—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤
  /// –§–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
  void _applyFilters() {
    List<Product> filtered = _products;

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (_selectedCategory != '–í—Å–µ') {
      filtered = filtered
          .where((product) => product.type == _selectedCategory)
          .toList();
    }

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
    if (_searchQuery.isNotEmpty) {
      final lowercaseQuery = _searchQuery.toLowerCase();
      filtered = filtered.where((product) {
        return product.title.toLowerCase().contains(lowercaseQuery) ||
            product.author.toLowerCase().contains(lowercaseQuery) ||
            product.type.toLowerCase().contains(lowercaseQuery);
      }).toList();
    }

    _filteredProducts = filtered;
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ ID
  /// @param id - ID –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
  /// @return Product –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω, null –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
  Future<Product?> getProductById(String id) async {
    try {
      final response = await _client
          .schema('public')
          .from('products')
          .select()
          .eq('id', id)
          .single();
      return Product.fromJson(response);
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ ID: $e');
      return null;
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º (4.7 –∏ –≤—ã—à–µ)
  /// @return —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º
  List<Product> getFeaturedProducts() {
    return _products.where((product) => product.rating >= 4.7).toList();
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (3 —Å–∞–º—ã—Ö –Ω–æ–≤—ã—Ö)
  /// @return —Å–ø–∏—Å–æ–∫ –∏–∑ 3 –Ω–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
  List<Product> getNewProducts() {
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ —É–±—ã–≤–∞–Ω–∏—é –∏ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3
    final sorted = List<Product>.from(_products)
      ..sort((a, b) => b.createdAt.compareTo(a.createdAt));
    return sorted.take(3).toList();
  }

  /// –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
  /// –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  void clearFilters() {
    _selectedCategory = '–í—Å–µ';
    _searchQuery = '';
    _applyFilters();
    notifyListeners();
  }
}
